#!/usr/bin/env ruby
require 'rubygems'
begin
  require 'bundler'
  Bundler.setup
rescue Exception => e
end

here = File.expand_path(File.dirname __FILE__)
$:<< "#{here}/../lib"

require 'optparse'
begin
  require 'rake/dsl_definition'
rescue Exception => e
  # We might just be on an old version of Rake...
end
require 'rake'
require 'annotate'

if File.exists?('Rakefile')
  load './Rakefile'
else
  STDERR.puts "Can't find Rakefile. Are we in a Rails folder?"
end
Rake::Task[:environment].invoke
Annotate.load_tasks
Rake::Task[:set_annotation_options].invoke

task = :do_annotations
has_set_position = {}
OptionParser.new do |opts|
  opts.banner = "Usage: annotate_models [options] [ModelName]*"

  opts.on('-d', '--delete',
          "Remove annotations from all model files") do
    task = :remove_annotations
  end

  opts.on('-p', '--position [before|after]', ['before', 'after'],
          "Place the annotations at the top (before) or the bottom (after) of the model/test/fixture/factory file(s)") do |p|
    ENV['position'] = p
    [
      'position_in_class','position_in_factory','position_in_fixture','position_in_test'
    ].each do |key|
      ENV[key] = p unless(has_set_position[key])
    end
  end

  opts.on('--pc', '--position-in-class [before|after]', ['before', 'after'],
          "Place the annotations at the top (before) or the bottom (after) of the model file") do |p|
    ENV['position_in_class'] = p
    has_set_position['position_in_class'] = true
  end

  opts.on('--pf', '--position-in-factory [before|after]', ['before', 'after'],
          "Place the annotations at the top (before) or the bottom (after) of any factory files") do |p|
    ENV['position_in_factory'] = p
    has_set_position['position_in_factory'] = true
  end

  opts.on('--px', '--position-in-fixture [before|after]', ['before', 'after'],
          "Place the annotations at the top (before) or the bottom (after) of any fixture files") do |p|
    ENV['position_in_fixture'] = p
    has_set_position['position_in_fixture'] = true
  end

  opts.on('--pt', '--position-in-test [before|after]', ['before', 'after'],
          "Place the annotations at the top (before) or the bottom (after) of any test files") do |p|
    ENV['position_in_test'] = p
    has_set_position['position_in_test'] = true
  end

  opts.on('-v', '--version',
          "Show the current version of this gem") do
    puts "annotate v#{Annotate.version}"; exit
  end

  opts.on('-m', '--show-migration',
          "Include the migration version number in the annotation") do
    ENV['include_version'] = "yes"
  end

  opts.on('-i', '--show-indexes',
          "List the table's database indexes in the annotation") do
    ENV['show_indexes'] = "yes"
  end

  opts.on('-s', '--simple-indexes',
          "Concat the column's related indexes in the annotation") do
    ENV['simple_indexes'] = "yes"
  end

  opts.on('--model-dir dir',
          "Annotate model files stored in dir rather than app/models, may be used multiple times") do |dir|
    if !ENV['model_dir'].blank?
      ENV['model_dir'] = ENV['model_dir'] + ",#{dir}"
    else
      ENV['model_dir'] = dir
    end
  end

  opts.on('--ignore-model-subdirects',
          "Ignore subdirectories of the models directory") do |dir|
    ENV['ignore_model_sub_dir'] = "yes"
  end

  opts.on('--sort',
          "Sort columns in creation order rather than alphabetically") do |dir|
    ENV['sort'] = "yes"
  end

  opts.on('-R', '--require path',
          "Additional file to require before loading models, may be used multiple times") do |path|
    if !ENV['require'].blank?
      ENV['require'] = ENV['require'] + ",#{path}"
    else
      ENV['require'] = path
    end
  end

  opts.on('-e', '--exclude [tests,fixtures,factories]', ['tests','fixtures','factories'], "Do not annotate fixtures, test files, and/or factories") do |exclusions|
    exclusions.each { |exclusion| ENV["exclude_#{exclusion}"] = "yes" }
  end

  opts.on('-f', '--format [bare|rdoc|markdown]', ['bare', 'rdoc', 'markdown'], 'Render Schema Infomation as plain/RDoc/Markdown') do |fmt|
    ENV["format_#{fmt}"] = 'yes'
  end

  opts.on('--force', 'Force new annotations even if there are no changes.') do |force|
    ENV['force'] = 'yes'
  end

  opts.on('--trace', 'If unable to annotate a file, print the full stack trace, not just the exception message.') do |value|
    ENV['trace'] = 'yes'
  end
end.parse!


Annotate.eager_load
require "annotate/annotate_models"
require "annotate/active_record_patch"
options=Annotate.setup_options({ :is_rake => !ENV['is_rake'].blank? })
options[:require].each { |path| require path } if options[:require]
AnnotateModels.send(task, options)
